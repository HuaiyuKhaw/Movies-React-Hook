{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","text","style","fontSize","description","Movie","_ref","movie","poster","Poster","Title","width","alt","concat","src","Year","Search","_useState","useState","_useState2","Object","slicedToArray","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","initialState","loading","movies","errorMessage","reducer","state","action","objectSpread","payload","error","App","_useReducer","useReducer","_useReducer2","dispatch","useEffect","fetch","then","response","json","jsonResponse","components_Header","components_Search","Response","Error","map","index","components_Movie","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.434b3418.chunk.js","sourcesContent":["import React from 'react';\r\nconst Header = props => {\r\n\treturn (\r\n\t\t<header className=\"App-header\">\r\n\t\t\t<h2>{props.text}</h2>\r\n\t\t\t<div style={{fontSize: 12}}>{props.description}</div>\r\n\t\t</header>\r\n\t);\r\n};\r\nexport default Header;","import React from 'react';\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n\t'https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg';\r\n\r\nconst Movie = ({ movie }) => {\r\n\tconst poster = movie.Poster === 'N/A' ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n\treturn (\r\n\t\t<div className=\"movie\">\r\n\t\t\t<h2>{movie.Title}</h2>\r\n\t\t\t<div>\r\n\t\t\t\t<img width=\"200\" alt={`The movie titled: ${movie.Title}`} src={poster} />\r\n\t\t\t</div>\r\n\t\t\t<p>({movie.Year})</p>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Movie;\r\n","import React, { useState } from 'react';\r\n\r\nconst Search = props => {\r\n\tconst [searchValue, setSearchValue] = useState('');\r\n\tconst handleSearchInputChanges = e => {\r\n\t\tsetSearchValue(e.target.value);\r\n\t};\r\n\tconst resetInputField = () => {\r\n\t\tsetSearchValue('');\r\n\t};\r\n\tconst callSearchFunction = e => {\r\n\t\te.preventDefault();\r\n\t\tprops.search(searchValue);\r\n\t\tresetInputField();\r\n\t};\r\n\treturn (\r\n\t\t<form className=\"search\">\r\n\t\t\t<input value={searchValue} onChange={handleSearchInputChanges} type=\"text\" />\r\n\t\t\t<input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n\t\t</form>\r\n\t);\r\n};\r\nexport default Search;\r\n","import React, { useEffect, useReducer } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Movie from './components/Movie';\nimport Search from './components/Search';\n\nconst MOVIE_API_URL = 'https://www.omdbapi.com/?s=man&apikey=4a3b711b';\nconst initialState = {\n\tloading: true,\n\tmovies: [],\n\terrorMessage: null,\n};\nconst reducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'SEARCH_MOVIES_REQUEST':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n\t\t\t\terrorMessage: null,\n\t\t\t};\n\t\tcase 'SEARCH_MOVIES_SUCCESS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tmovies: action.payload,\n\t\t\t};\n\t\tcase 'SEARCH_MOVIES_FAILURE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terrorMessage: action.error,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\nconst App = () => {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\tuseEffect(() => {\n\t\tfetch(MOVIE_API_URL)\n\t\t\t.then(response => response.json())\n\t\t\t.then(jsonResponse => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SEARCH_MOVIES_SUCCESS',\n\t\t\t\t\tpayload: jsonResponse.Search,\n\t\t\t\t});\n\t\t\t});\n\t}, []);\n\tconst search = searchValue => {\n\t\tdispatch({\n\t\t\ttype: 'SEARCH_MOVIES_REQUEST',\n\t\t});\n\t\tfetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(jsonResponse => {\n\t\t\t\tif (jsonResponse.Response === 'True') {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SEARCH_MOVIES_SUCCESS',\n\t\t\t\t\t\tpayload: jsonResponse.Search,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SEARCH_MOVIES_FAILURE',\n\t\t\t\t\t\terror: jsonResponse.Error,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t};\n\tconst { movies, errorMessage, loading } = state;\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header text=\"MOVIES\" description=\"made with ❤ by React Hook\"/>\n\t\t\t<Search search={search} />\n\t\t\t<p className=\"App-intro\">Sharing a few of our favourite movies</p>\n\t\t\t<div className=\"movies\">\n\t\t\t\t{loading && !errorMessage ? (\n\t\t\t\t\t<span>loading... </span>\n\t\t\t\t) : errorMessage ? (\n\t\t\t\t\t<div className=\"errorMessage\">{errorMessage}</div>\n\t\t\t\t) : (\n\t\t\t\t\tmovies.map((movie, index) => <Movie key={`${index}-${movie.Title}`} movie={movie} />)\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}